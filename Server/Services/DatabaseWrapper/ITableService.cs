using BlazorChat.Server.Models;
using Microsoft.Azure.Cosmos.Scripts;

namespace BlazorChat.Server.Services.DatabaseWrapper
{
    /// <summary>
    /// Simplified request result type for table actions
    /// </summary>
    public struct TableActionResult
    {
        public enum ECode
        {
            /// <summary>
            /// The result struct has not been initialized
            /// </summary>
            NotInitialized,
            /// <summary>
            /// The operation was a success
            /// </summary>
            Success,
            /// <summary>
            /// Target of the operation could not be found
            /// </summary>
            NotFound,
            /// <summary>
            /// An error occured
            /// </summary>
            Error
        }

        /// <summary>
        /// Operation Code
        /// </summary>
        public ECode Code;
        /// <summary>
        /// Checks code for success
        /// </summary>
        public bool IsSuccess { get => Code == ECode.Success; }
        public TableActionResult() { Code = ECode.NotInitialized; }
        private TableActionResult(ECode code) { Code = code; }

        public static readonly TableActionResult Success = new TableActionResult(ECode.Success);
        public static readonly TableActionResult NotFound = new TableActionResult(ECode.NotFound);
        public static readonly TableActionResult Error = new TableActionResult(ECode.Error);
    }

    /// <summary>
    /// Table result type with return value
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public struct TableActionResult<T>
    {
        public TableActionResult.ECode Code;
        public bool IsSuccess { get => Code == TableActionResult.ECode.Success; }

        /// <summary>
        /// Result value of the operation if success, default otherwise
        /// </summary>
        public T? Result;
        /// <summary>
        /// 
        /// </summary>
        public T ResultAsserted
        {
            get
            {
                if (!IsSuccess)
                {
                    throw new InvalidOperationException();
                }
                return Result!;
            }
        }

        public TableActionResult() { Code = TableActionResult.ECode.NotInitialized; Result = default; }
        private TableActionResult(TableActionResult.ECode code) { Code = code; Result = default; }
        private TableActionResult(T? result) { Code = TableActionResult.ECode.Success; Result = result; }

        public static TableActionResult<T> Success(T? result)
        {
            return new TableActionResult<T>(result);
        }
        public static readonly TableActionResult<T> NotFound = new TableActionResult<T>(TableActionResult.ECode.NotFound);
        public static readonly TableActionResult<T> Error = new TableActionResult<T>(TableActionResult.ECode.Error);
    }

    /// <summary>Wraps a table (CosmosDB container)</summary>
    /// <remarks>
    /// Each table is bound to a model type via the type parameter <typeparamref name="T"/>. 
    /// This types attributes determine how it is accessed:
    /// [JsonPropertyName("id")] is the CosmosDB item id (aka the primary key);
    /// [PartitionKeyProperty] is the CosmosDB partition key. 
    /// If GenerateFromId is set, then the partition key will be automatically generated by
    /// Converting id value to string, hashing and compacting to a 4 byte value.
    /// </remarks>
    public interface ITableService<T>
    {
        /// <summary>
        /// Creates a new item
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public Task<TableActionResult> CreateItemAsync(T item);
        /// <summary>
        /// Replaces an existing item
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public Task<TableActionResult> ReplaceItemAsync(T item);
        /// <summary>
        /// Gets an item
        /// </summary>
        /// <param name="id"></param>
        /// <param name="partitionKey"></param>
        /// <returns></returns>
        public Task<TableActionResult<T>> GetItemAsync(string id, string? partitionKey = null);
        /// <summary>
        /// Performs and flattens a query
        /// </summary>
        /// <param name="query">If amended all items are returned</param>
        /// <param name="partition">If specified only one partition is returned</param>
        /// <returns></returns>
        public Task<TableActionResult<List<T>>> QueryItemsAsync(string? query = default, string? partitionKey = default);
        /// <summary>
        /// Deletes an item
        /// </summary>
        /// <param name="id"></param>
        /// <param name="partitionKey"></param>
        /// <returns></returns>
        public Task<TableActionResult> DeleteItemAsync(string id, string? partitionKey = null);
        /// <summary>
        /// Run the bulk delete script
        /// </summary>
        /// <param name="query">If specified, only affects items matching the query</param>
        /// <param name="partitionKey">If specified, only affects items within one partition</param>
        /// <returns></returns>
        public Task<TableActionResult> BulkDeleteItemsAsync(string? query = default, string? partitionKey = default);
    }
}
